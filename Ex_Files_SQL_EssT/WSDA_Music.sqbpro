<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/Jose A. Fumo/Documents/Ex_Files_SQL_EssT/WSDA_Music.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="150"/><column_width id="3" width="3930"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,6:mainArtist"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Album" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="61"/><column index="2" value="219"/><column index="3" value="59"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Artist" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="2" mode="0"/></sort><column_widths><column index="1" value="90"/><column index="2" value="226"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Customer" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="131"/><column index="2" value="115"/><column index="3" value="125"/><column index="4" value="300"/><column index="5" value="300"/><column index="6" value="199"/><column index="7" value="65"/><column index="8" value="149"/><column index="9" value="123"/><column index="10" value="199"/><column index="11" value="189"/><column index="12" value="282"/><column index="13" value="156"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Employee" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="133"/><column index="2" value="111"/><column index="3" value="115"/><column index="4" value="187"/><column index="5" value="115"/><column index="6" value="195"/><column index="7" value="195"/><column index="8" value="275"/><column index="9" value="102"/><column index="10" value="65"/><column index="11" value="92"/><column index="12" value="123"/><column index="13" value="178"/><column index="14" value="178"/><column index="15" value="256"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Genre" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="96"/><column index="2" value="172"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Invoice" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="111"/><column index="2" value="131"/><column index="3" value="195"/><column index="4" value="300"/><column index="5" value="199"/><column index="6" value="129"/><column index="7" value="156"/><column index="8" value="187"/><column index="9" value="79"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="InvoiceLine" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="153"/><column index="2" value="111"/><column index="3" value="91"/><column index="4" value="105"/><column index="5" value="99"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="MediaType" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="145"/><column index="2" value="253"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Playlist" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="108"/><column index="2" value="237"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="PlaylistTrack" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="108"/><column index="2" value="91"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Track" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="91"/><column index="2" value="222"/><column index="3" value="100"/><column index="4" value="145"/><column index="5" value="96"/><column index="6" value="295"/><column index="7" value="135"/><column index="8" value="117"/><column index="9" value="105"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="V_Tracks_InvoiceLine" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="68"/><column index="2" value="65"/><column index="3" value="64"/><column index="4" value="134"/><column index="5" value="204"/><column index="6" value="84"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="V_avgTotal" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="112"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="Between">/*
CREATED BY: Jose A. Fumo
CREATED DATE: 02.01.24
DESCRIPTION: How many Customers purchased two songs BETWEEN $1.98 and $5.00 each?
AnS: 178
*/
SELECT 
 InvoiceDate,
 BillingAddress,
 BillingCity,
 total
FROM 
 Invoice
WHERE 
 total BETWEEN 1.98 and 5.00
ORDER BY
 InvoiceDate</sql><sql name="IN">/*
CREATED BY: Jose A. Fumo
CREATED DATE: 02.01.24
DESCRIPTION: How many Invoices do we have that are exactly $1.98 or $3.96?
Asw: 168
*/
SELECT 
 InvoiceDate,
 BillingAddress,
 BillingCity,
 total
FROM
 Invoice
Where 
 total IN (1.98, 3.96) 
ORDER BY
 InvoiceDate</sql><sql name="Analyse Text data">/*
CREATED BY: Jose A. Fumo
CREATED DATE: 02.01.24
DESCRIPTION: How many Invoices were billed to Brussels, Orlando or Paris?
Asw: 28
*/
SELECT
 InvoiceDate,
 BillingAddress,
 BillingCity,
 total
FROM 
 Invoice
WHERE
 BillingCity IN  ('Brussels','Orlando','Paris')
ORDER BY
 InvoiceDate</sql><sql name="AND">/*
CREATED BY: Jose A. Fumo
CREATED DATE: 02.01.24
DESCRIPTION: How many Invoices were billed on May 22, 2010 and have a total of less than 3.00?
Asw: 124
*/
SELECT
 InvoiceDate,
 BillingCity,
 BillingAddress,
 total
FROM
 Invoice
WHERE 
 DATE(InvoiceDate) &gt; '2010-05-22' AND total &lt; 3.00
ORDER BY total</sql><sql name="Brackets Order">/*
CREATED BY: Jose A. Fumo
CREATED DATE: 02.01.24
DESCRIPTION: Get all Invoices that are greater than 1.98 and from any other ciies whose names start with P or Starts with D?
Asw: 56

PEMDAS - Parentheses, Exponents, Multiplication/Division, Addition/Subtraction
BEMDAS - Parentheses, Exponents, Multiplication/Division, Addition/Subtraction
*/
SELECT
 InvoiceDate,
 BillingCity,
 BillingAddress,
 total
FROM
 Invoice
WHERE 
 total &gt; 1.98 AND (BillingCity LIKE 'P%' OR BillingCity LIKE 'D%')
ORDER BY InvoiceDate</sql><sql name="CASE">/*
CREATED BY: Jose A. Fumo
CREATED DATE: 02.01.24
WSDA Music: Sales Goal
They want as many Customers as possible to spend BETWEEN $7.00 and $15.00

SALES CATEGORIES:
Baseline Purchase: Between $0.99 and $1.99
Low Purchase:      Between $2.00 and $6.99
Target Purchase:   Between $7.00 and $15.00
Top Performer:     Above $15.00
*/
SELECT
 InvoiceDate,
 BillingAddress,
 BillingCity,
 total,
 CASE
 WHEN total&lt; 2.00 THEN 'Baseline Purchase'
 WHEN total BETWEEN 2.00 AND 6.99 THEN 'Low Purchase'
 WHEN total BETWEEN 7.00 AND 15.00 THEN 'Target Purchase'
 ELSE 'Top Performer'
 END AS  PurchaseType
FROM 
 Invoice
WHERE PurchaseType = 'Top Performer'
ORDER BY
 BillingCity	
</sql><sql name="SQL 12">/*
CREATED BY: Jose A. Fumo
CREATED DATE: 30.01.24
WSDA Music: Sales Goal
They want to know how many costumers do we have, that last name starts with S
*/


SELECT
  CustomerId,
  FirstName,
  LastName
FROM
  Customer
WHERE
  LastName LIKE &quot;%S&quot;
ORDER BY 
  LastName</sql><sql name="CONCAT">/*
CREATED BY: Jose A. Fumo
CREATED DATE: 31.01.24
WSDA Music: Sales Goal
Description: Creating a Mailing list of US Customers
*/

SELECT
 FirstName,
 LastName,
 Address,
 FirstName ||' '||LastName ||' '|| Address || ', '|| City|| ' '||State ||' '||PostalCode AS &quot;Mailling Address&quot;,
 LENGTH(postalCode),
 substr(postalcode,1,5) AS [5 Digit PostalCode],
 upper(FirstName) AS [Name in UPPER CASE],
 lower(Lastname) AS [name in lower casa]
FROM
  Customer
WHERE
  Country = &quot;USA&quot;
ORDER BY
 FirstName</sql><sql name="Group by with two fields">/*
CREATED BY: Jose A. Fumo
CREATED DATE: 06.02.2024
DESCRIPTION: Grouping By in more than one field at time | What are the average invoice totals by billing Country and cities?
*/
SELECT
  BillingCountry,
  BillingCity,
  round (avg(total),2) AS [Average Total]
FROM
  Invoice
GROUP BY
 BillingCountry, BillingCity
ORDER BY
  BillingCountry</sql><sql name="Subqueries">/*
CREATED BY: Jose A. Fumo
CREATED DATE: 05.02.2024
DESCRIPTION: Subqueries | Gather data about all invoices that are less than this average?
*/
SELECT 
 InvoiceDate,
 BillingAddress,
 BillingCity,
 total
FROM 
 Invoice
WHERE
  total &lt;  (SELECT round(avg (total),2) from Invoice)
ORDER BY
  total DESC
</sql><sql name="Subquerie_select">/*
CREATED BY: Jose A. Fumo
CREATED DATE: 05.02.2024
DESCRIPTION: Subqueries in the SELECT | How is each individual city performing agains the global average sales?
*/
SELECT 
  BillingCity,
  round(avg(total),2) AS [City Average],
  (SELECT round(avg(total),2) FROM Invoice) AS [Global Average]
 FROM 
  Invoice 
 GROUP BY
   BillingCity
</sql><sql name="Sub_no_Aggregate">/*
CREATED BY: Jose A. Fumo
CREATED DATE: 05.02.2024
DESCRIPTION: Subqueries without aggregate functions
*/
SELECT 
  InvoiceDate,
  BillingAddress,
  BillingCity
FROM 
  Invoice
WHERE
	InvoiceDate &gt; 
	(SELECT InvoiceDate FROM Invoice WHERE InvoiceId = 251)
ORDER BY 
  BillingCity</sql><sql name="sub_mult_values">/*
CREATED BY: Jose A. Fumo
CREATED DATE: 05.02.2024
DESCRIPTION: Returning multipli values from a subquery
*/
SELECT
  InvoiceDate,
  BillingAddress,
  BillingCity
FROM
	Invoice
WHERE 
	InvoiceDate IN 
(SELECT InvoiceDate FROM Invoice WHERE InvoiceId IN (251, 252, 254))
</sql><sql name="DISTINT">/*
CREATED BY: Jose A. Fumo
CREATED DATE: 05.02.2024
DESCRIPTION: Subqueries and DISTINCT | Which tracks are not selling?
*/
SELECT 
  TrackId,
  Composer,
  Name
 FROM 
  Track
 WHERE
   TrackId
NOT IN
(SELECT
  DISTINCT
  TrackId
FROM 
 InvoiceLine
ORDER BY
 TrackId)</sql><sql name="EXERCISES">/*
CREATED BY: Jose A. Fumo
CREATED DATE: 07.02.2024
DESCRIPTION: Pratice || Exercises
*/
--1. Get all employee details from the employee table
/*
SELECT
 *
FROM
Employee 
--2. Get First_Name,Last_Name from employee 
SELECT 
 FirstName,
 LastName
FROM
 Employee
ORDER BY 
FirstName   
-- 3. Get First_Name from employee table using alias name “Employee Name”
SELECT 
 FirstName AS [Employee Name]
FROM
 Employee 
 -- 4. Get First_Name from employee table in upper case
 SELECT 
   upper (FirstName)
  FROM 
   Employee
ORDER BY 
 FirstName  
--5. Get First_Name from employee table in lower case
 SELECT
   lower(FirstName) AS [Name in Lower Case]
 FROM 
   Employee  
--6. Get unique DEPARTMENT from employee table
SELECT 
	DISTINCT
	Title
 FROM Employee 
-- 7. Select first 3 characters of FIRST_NAME from EMPLOYEE
SELECT
  substr(firstname, 1, 3)
FROM 
 Employee 
-- 8. Get position of 'o' in name 'Robert' from employee table 
SELECT
 FirstName,
 instr (FirstName, 'o') As [Position]
FROM
Employee
WHERE
  FirstName = 'Robert'  
-- 9. Get FIRST_NAME from employee table after removing white spaces from right side
SELECT
  rtrim(FirstName) AS [Whitout white Space]
FROM 
  Employee  
--10. Get FIRST_NAME from employee table after removing white spaces from left side
SELECT
  ltrim (FirstName) AS [WITHOUT LTRIM]
FROM
  Employee
ORDER BY 
 FirstName  
 --11. Get length of FIRST_NAME from employee table
SELECT
 FirstName,
 length(firstname) AS [Lenght of First Name]
FROM
 Employee
ORDER BY 
  FirstName 
  --12. Get First_Name from employee table after replacing 'o' with '$'
  SELECT
    replace (FirstName, 'o','$')
FROM 
 Employee
WHERE 
  FirstName= 'Robert'  
--13. Get First_Name and Last_Name as single column from employee table separated by a '_'
SELECT 
  FirstName || ' '||  LastName AS [Full Name]
FROM 
  Employee 
--14. Get FIRST_NAME ,Joining year,Joining Month and Joining Date from employee table
SELECT 
 FirstName,
 strftime('%Y- %m - %d', birthdate) AS [Birthdate]
FROM 
 Employee  
 Database SQL Queries &quot;SQL Order By&quot; 
--15. Get all employee details from the employee table order by First_Name Ascending
SELECT  
 *
FROM 
  Employee
ORDER BY
 FirstName ASC  
 --16. Get all employee details from the employee table order by First_Name Descending
SELECT
 *
FROM 
  Employee
ORDER BY
  FirstName DESC 
 --17. Get all employee details from the employee table order by First_Name Ascending and LastName descending 
SELECT
  *
FROM 
 Employee
ORDER BY 
 FirstName ASC, LastName DESC 
-- 18. Get employee details from employee table whose employee name is “Peacock”
SELECT
  *
FROM 
 Employee
WHERE
 LastName = 'Peacock' 
-- 19. Get employee details from employee table whose employee name are “Nancy” and “Steve”
SELECT
 *
FROM
 Employee
WHERE
 FirstName IN ('Nancy' , 'Steve') 
-- 20. Get employee details from employee table whose employee name are not “Nancy” and “Steve”
SELECT
 *
FROM
 Employee
WHERE
 FirstName NOT IN ('Nancy','Steve') 
-- 21. Get employee details from employee table whose first name starts with 'J'
SELECT
 *
FROM 
 Employee
WHERE 
 FirstName like 'J%' 
--22. Get employee details from employee table whose first name contains 'o'
SELECT 
  *
FROM
  Employee
WHERE	
  FirstName LIKE '%o%' 
-- 23. Get employee details from employee table whose first name ends with 'w'
SELECT
  *
FROM 
  Employee
WHERE
  FirstName like '%w' 
--24. Get employee details from employee table whose first name ends with 'W' and name contains 5 letters
SELECT
 * 
FROM
  Employee
WHERE
  FirstName LIKE '_____w' 
-- 25. Get employee details from employee table whose first name starts with 'J' and name contains 4 letters
SELECT
 *
FROM 
  Employee
WHERE
  FirstName LIKE 'J___' 
-- 29. Get employee details from employee table whose name is 'Laura' and 'Steve'
SELECT 
  *
FROM 
  Employee
WHERE
  FirstName in ('Laura','Steve') 
-- 30. Get employee details from employee table whose joining year is “2003”
SELECT
  *
FROM
  Employee
WHERE
   strftime('%Y',HireDate) = '2003' 
-- 31. Get employee details from employee table whose joining month is “January”
SELECT
  *
FROM
  Employee
WHERE
  strftime ('%m',HireDate) = '01'  
-- 32. Get employee details from employee table who joined before January 2nd 2004
SELECT
  *
FROM
  Employee
WHERE
  strftime('%Y-%m-%d', HireDate) &lt; '2004' 
-- 41. Get department,total salary with respect to a department from employee table.
SELECT 
 FirstName,
 LastName,
 Title
FROM 
  Employee
GROUP BY
  Title 
-- 42. Get BillingCity, BillingCountry and total  from Invoice table order by total descending
SELECT 
  BillingCity,
  BillingCountry,
  round(avg (total),2) AS [Total]
FROM 
  Invoice 
GROUP BY 
  BillingCountry 
ORDER BY 
  total DESC 
-- 43. Get BillingCity, BillingCountry and total from Invoice table order by total  descending
SELECT
  BillingCountry,
  count(BillingCity),
  round(avg(total)) AS [Total]
FROM 
  Invoice
GROUP BY
  BillingCountry
ORDER BY
  total DESC 
-- 49. Select name, AlbumId and composer from genre genre table for those Track have Milliseconds less than 2000
SELECT 
  t.Name,
  t.AlbumId,
  g.Name AS [Genre],
  t.Composer
FROM 
 Track t
INNER JOIN 
  Genre g
ON 
 t.GenreId = g.GenreId
WHERE 
 t.Milliseconds &lt; 2000 
-- 50. Select name, AlbumId and composer from genre genre table 
SELECT 
  t.Name,
  t.AlbumId,
  g.Name AS [Genre Name],
  t.Composer
FROM 
  Track t
LEFT JOIN
  Genre g
ON 
  t.GenreId = g.GenreId  
--55. Select TOP 2 Invoice from Invoice table
SELECT 
  *
FROM 
  Invoice
ORDER BY
 total DESC
LIMIT 
  2  */
-- 

</sql><sql name="Views">/*
CREATED BY: Jose A. Fumo
CREATED DATE: 13.02.2024
DESCRIPTION: Creating Views
*/

CREATE VIEW V_avgTotal AS 
SELECT 
  round (avg(total),2) as [AVERAGE TOTAL]
FROM 
  Invoice</sql><sql name="Joining_Views">/*
CREATED BY: Jose A. Fumo
CREATED DATE: 22.02.2024
DESCRIPTION: Joining in a View
*/
CREATE VIEW V_Tracks_InvoiceLine AS
SELECT 
  il.InvoiceId,
  il.UnitPrice, 
  il.Quantity,
  t.Name,
  t.Composer,
  t.Milliseconds
  
FROM 
 InvoiceLine il 
INNER JOIN 
  Track t
ON
  il.TrackId = t.TrackId</sql><sql name="INSERT">/*
CREATED BY: Jose A. Fumo
CREATED DATE: 22.02.2024
DESCRIPTION: Data Manipulation Language (DML) - INSERT
*/
INSERT INTO 
  Artist (Name)
VALUES ('Bob Marley')</sql><sql name="UPDATE">/*
CREATED BY: Jose A. Fumo
CREATED DATE: 22.02.2024
DESCRIPTION: Data Manipulation Language (DML) - UPDATING DATA
*/
UPDATE 
  Artist
SET Name = 'Damien Marley'
WHERE 
 ArtistId = 276</sql><current_tab id="18"/></tab_sql></sqlb_project>
